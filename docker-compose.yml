version: '3'
services:

   database:
      container_name: postgres
      image: postgres:16
      environment:
        POSTGRES_DB: candy_shop
        POSTGRES_USER: untypicalusername
        POSTGRES_PASSWORD: myuntypicalpassword
        PGDATA: /var/lib/postgresql/data
      restart: always
      ports:
        - "5432:5432"
      volumes:
        - postgres-data:/var/lib/postgresql/data
      networks:
       - my-network
      healthcheck:
        test: [ "CMD-SHELL", "pg_isready -U $${POSTGRES_USER} -d $${POSTGRES_DB}" ]
        interval: 10s
        timeout: 5s
        retries: 5

   zookeeper:
     image: confluentinc/cp-zookeeper:7.0.1
     container_name: zookeeper
     ports:
       - "2181:2181"
     environment:
       ZOOKEEPER_CLIENT_PORT: 2181
       ZOOKEEPER_TICK_TIME: 2000
     restart: always
     networks:
     - my-network

   broker:
     image: confluentinc/cp-kafka:7.0.1
     container_name: broker
     ports:
       - "9092:9092"
     depends_on:
       - zookeeper
     environment:
       KAFKA_BROKER_ID: 1
       KAFKA_ZOOKEEPER_CONNECT: 'zookeeper:2181'
       KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_INTERNAL:PLAINTEXT
       KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://broker:9092,PLAINTEXT_INTERNAL://broker:29092
       KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 3
       KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 2
       KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 3
     restart: always
     networks:
     - my-network

   db:
     container_name: db
     image: postgres:16
     volumes:
        - postgresvolume:/var/lib/postgres/data
     restart: always
     environment:
      POSTGRES_USER: root
      POSTGRES_PASSWORD: root
      POSTGRES_DB: candy
     ports:
       - "5433:5432"
     networks:
     - my-network

   keycloak:
     container_name: keycloak
     image: quay.io/keycloak/keycloak:23.0.7
     depends_on:
       - db
     environment:
       KEYCLOAK_ADMIN: admin
       KEYCLOAK_ADMIN_PASSWORD: admin
       KC_DB: postgres
       KC_DB_URL: jdbc:postgresql://db/candy
       KC_DB_USERNAME: root
       KC_DB_PASSWORD: root
       KEYCLOAK_PORT: 8080
       KC_REALM: candy-shop-realm
     restart: always
     ports:
       - "8080:8080"
     command:
       - start-dev
     networks:
     - my-network


   configserver:
    image: candy/configserver:latest
    container_name: configserver
    ports:
     - "8888:8888"
    restart: always
    networks:
    - my-network

   eurekaserver:
     image: candy/eurekaserver:latest
     container_name: eurekaserver
     ports:
       - "8761:8761"
     depends_on:
       configserver:
          condition: service_started
     networks:
     - my-network
     environment:
       - SPRING_CLOUD_CONFIG_URI = http://configserver:8888
       - EUREKA_CLIENT_SERVICEURL_DEFAULTZONE=http://eurekaserver:8761/eureka
     restart: always

   gatewayserver:
     image: candy/gatewayserver:latest
     container_name: gateway
     ports:
       - "8081:8081"
     depends_on:
       eurekaserver:
         condition: service_started
       configserver:
         condition: service_started
     networks:
     -  my-network
     environment:
       - SPRING_CLOUD_CONFIG_URI = http://configserver:8888
       - SPRING_DATASOURCE_URL=jdbc:postgresql://database:5432/candy_shop
       - EUREKA_CLIENT_SERVICEURL_DEFAULTZONE=http://eurekaserver:8761/eureka
     restart: always


  # Product-Service Docker Compose Config
   productservice:
     container_name: product-service
     image: candy/product-service:latest
     ports:
       - "8083:8083"
     depends_on:
       database:
         condition: service_healthy
       configserver:
         condition: service_started
       broker:
         condition: service_started
     networks:
      - my-network
     environment:
       - SPRING_PROFILES_ACTIVE=docker
       - SPRING_CLOUD_CONFIG_URI=http://configserver:8888
       - SPRING_DATASOURCE_URL=jdbc:postgresql://database:5432/candy_shop
       - OAUTH2_DISCOVERY_URL=http://keycloak:8080/realms/candy-shop-realm/.well-known/openid-configuration
       - SPRING_SECURITY_OAUTH2_CLIENT_PROVIDER_KEYCLOAK_AUTHORIZATION-URI=http://localhost:8080/realms/candy-shop-realm/protocol/openid-connect/auth
       - SPRING_SECURITY_OAUTH2_CLIENT_PROVIDER_KEYCLOAK_ISSUER-URI=http://keycloak:8080/realms/candy-shop-realm
        - SPRING_SECURITY_OAUTH2_CLIENT_PROVIDER_KEYCLOAK_JWK-SET-URI=http://keycloak:8080/realms/candy-shop-realm/protocol/openid-connect/certs

  # Order-Service Docker Compose Config
   orderservice:
     container_name: order-service
     image: candy/order-service:latest
     ports:
       - "8082:8082"
     depends_on:
       database:
         condition: service_healthy
       configserver:
         condition: service_started
       broker:
         condition: service_started
     networks:
      - my-network
     environment:
       - SPRING_PROFILES_ACTIVE=docker
       - SPRING_CLOUD_CONFIG_URI= http://configserver:8888
       - SPRING_DATASOURCE_URL=jdbc:postgresql://database:5432/candy_shop
       - OAUTH2_DISCOVERY_URL=http://keycloak:8080/realms/candy-shop-realm/.well-known/openid-configuration
       - SPRING_SECURITY_OAUTH2_CLIENT_PROVIDER_KEYCLOAK_AUTHORIZATION-URI=http://localhost:8080/realms/candy-shop-realm/protocol/openid-connect/auth
       - SPRING_SECURITY_OAUTH2_CLIENT_PROVIDER_KEYCLOAK_ISSUER-URI=http://keycloak:8080/realms/candy-shop-realm
       - SPRING_SECURITY_OAUTH2_CLIENT_PROVIDER_KEYCLOAK_JWK-SET-URI=http://keycloak:8080/realms/candy-shop-realm/protocol/openid-connect/certs


  # Inventory-Service Docker Compose Config
   inventoryservice:
     container_name: inventory-service
     image: candy/inventory-service:latest
     ports:
       - "8084:8084"
     depends_on:
       database:
         condition: service_healthy
       configserver:
         condition: service_started
       broker:
         condition: service_started
     networks:
      - my-network
     environment:
       - SPRING_PROFILES_ACTIVE=docker
       - SPRING_CLOUD_CONFIG_URI= http://configserver:8888
       - SPRING_DATASOURCE_URL=jdbc:postgresql://database:5432/candy_shop
       - SPRING_SECURITY_OAUTH2_CLIENT_PROVIDER_KEYCLOAK_AUTHORIZATION-URI=http://localhost:8080/realms/candy-shop-realm/protocol/openid-connect/auth
       - OAUTH2_DISCOVERY_URL=http://keycloak:8080/realms/candy-shop-realm/.well-known/openid-configuration
       - SPRING_SECURITY_OAUTH2_RESOURCESERVER_JWT_ISSUER-URI=http://keycloak:8080/realms/candy-shop-realm
       - SPRING_SECURITY_OAUTH2_CLIENT_PROVIDER_KEYCLOAK_JWK-SET-URI=http://keycloak:8080/realms/candy-shop-realm/protocol/openid-connect/certs


volumes:
  postgresvolume:
  postgres-data:

networks:
  my-network:
    driver: bridge












